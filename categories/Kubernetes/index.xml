<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Mr.耗子</title>
    <link>http://blog.k-8s.com/categories/Kubernetes/</link>
    <description>Recent content in Kubernetes on Mr.耗子</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 09 May 2019 09:45:26 +0800</lastBuildDate>
    
	<atom:link href="http://blog.k-8s.com/categories/Kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes Service</title>
      <link>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Services/</link>
      <pubDate>Thu, 09 May 2019 09:45:26 +0800</pubDate>
      
      <guid>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Services/</guid>
      <description>&lt;h3 id=&#34;service-的作用&#34;&gt;Service 的作用&lt;/h3&gt;

&lt;p&gt;Service 可以为一组具有相同功能的容器应用提供统一的入口和负载均衡&lt;/p&gt;

&lt;h3 id=&#34;创建和使用-service&#34;&gt;创建和使用 Service&lt;/h3&gt;

&lt;p&gt;先创建 2 个 nginx 应用容器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再编写对应的 svcNginx.yaml&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 存储</title>
      <link>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Volumes/</link>
      <pubDate>Tue, 07 May 2019 21:36:22 +0800</pubDate>
      
      <guid>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Volumes/</guid>
      <description>&lt;h3 id=&#34;volume&#34;&gt;Volume&lt;/h3&gt;

&lt;p&gt;Volume 是一种 Pod 级别的存储卷, 用于解决当 Pod 异常退出后, 被kubelet拉起时保证之前存储的数据不丢失&lt;/p&gt;

&lt;p&gt;volume的生命周期与 Pod 相同, 且 Pod 中多个容器可以共享 Volume&lt;/p&gt;

&lt;p&gt;volume类型:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;k8s内置的类型 (详细参见文章 &amp;ldquo;&lt;a href=&#34;https://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-basic-concept/#volume&#34;&gt;Kubernetes 基础概念和术语&lt;/a&gt;&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;第三方: flexvolume/csi等网络存储 volume plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;volume-的创建和使用&#34;&gt;Volume 的创建和使用&lt;/h3&gt;

&lt;p&gt;Volume 不需要提前创建即可被 Pod 使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Pod 调度</title>
      <link>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Pod-Scheduling/</link>
      <pubDate>Sat, 04 May 2019 10:13:32 +0800</pubDate>
      
      <guid>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Pod-Scheduling/</guid>
      <description>&lt;p&gt;通常来说, 不会直接创建一个 Pod, 这样管理起来会很不方便. 绝大多数情况下, 会通过 RS, Deployment, DaemonSet, Job 等来完成对一组 Pod 副本的管理工作.&lt;/p&gt;

&lt;p&gt;Pod 调度分一下几种:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deployment 或 RC: 全自动调度&lt;/li&gt;
&lt;li&gt;NodeSelector: 定向调度&lt;/li&gt;
&lt;li&gt;NodeAffinity: Node 亲和性调度&lt;/li&gt;
&lt;li&gt;PodAffinity: Pod 亲和与互斥调度&lt;/li&gt;
&lt;li&gt;Taints 和 Tolerations: (污点和容忍)&lt;/li&gt;
&lt;li&gt;Pod Priority Preemption: Pod 优先级调度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由以上控制器产生的副本是归属于这些控制器的, 在 Kubernetes 1.9 版本之前, 删除控制器并不会删除 Pod, Kubernetes 1.9 版本以后, 这些 Pod 会被一并删除. 如果不希望这么做, 可以通过 kubectl 的 &lt;strong&gt;&lt;em&gt;&lt;code&gt;--cascade=false&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; 来取消这一特性:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl delete replicaset my-repset --cascade=false
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Pod 详解</title>
      <link>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Pod/</link>
      <pubDate>Fri, 03 May 2019 22:36:22 +0800</pubDate>
      
      <guid>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Pod/</guid>
      <description>&lt;h3 id=&#34;创建-pod&#34;&gt;创建 Pod&lt;/h3&gt;

&lt;p&gt;我们先来通过命令的方式, 来创建一个简单的 Pod&lt;/p&gt;

&lt;p&gt;需要注意的一点是, 如果只想创建一个 Pod, 而不是创建一个 Deployment, 则需要指定参数 &lt;strong&gt;&lt;em&gt;&lt;code&gt;--generator=run-pod/v1&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@K8sMaster-1:~# kubectl run my-nginx --image=nginx:1.14.1 --replicas=2 --port=80 --generator=run-pod/v1
pod/my-nginx created

root@K8sMaster-1:~# kubectl get pods
NAME       READY   STATUS    RESTARTS   AGE
my-nginx   1/1     Running   0          8s

# 查看pod 详情
root@K8sMaster-1:~# kubectl describe pod my-nginx
Name:               my-nginx
Namespace:          default
Priority:           0
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               k8snode-1/192.168.206.151
Start Time:         Sun, 27 Oct 2019 14:29:22 +0800
Labels:             run=my-nginx
Annotations:        &amp;lt;none&amp;gt;
Status:             Running
IP:                 10.244.1.11
Containers:
  my-nginx:
    Container ID:   docker://9edea905f888a0a10d9e7859f995ce0e4e43e388b42b8d9c7a20f880915307c8
    Image:          nginx:1.14.1
    Image ID:       docker-pullable://nginx@sha256:32fdf92b4e986e109e4db0865758020cb0c3b70d6ba80d02fe87bad5cc3dc228
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sun, 27 Oct 2019 14:29:23 +0800
    Ready:          True
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过以上方式, 我们就能创建一个名为 &lt;strong&gt;my-nginx&lt;/strong&gt; 的 Pod, 使用的是 &lt;strong&gt;nginx:1.14.1&lt;/strong&gt; 的镜像, 并且指定开放的端口为 &lt;strong&gt;80&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 基本概念和术语</title>
      <link>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-basic-concept/</link>
      <pubDate>Fri, 03 May 2019 21:36:22 +0800</pubDate>
      
      <guid>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-basic-concept/</guid>
      <description>&lt;h2 id=&#34;基本概念和术语&#34;&gt;基本概念和术语&lt;/h2&gt;

&lt;p&gt;Kubernetes 中, 大部分的概念都是一种资源对象, 几乎所有的资源都可以通过 &lt;strong&gt;&lt;em&gt;kubectl&lt;/em&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;em&gt;API&lt;/em&gt;&lt;/strong&gt; 来执行 &lt;strong&gt;&lt;em&gt;增, 删, 改, 查&lt;/em&gt;&lt;/strong&gt; 等操作. 所有的修改都将被保存在 &lt;strong&gt;&lt;em&gt;etcd&lt;/em&gt;&lt;/strong&gt; (etcd 是一个分布式键值对数据库, 这里暂时不讨论) 中持久化存储.&lt;/p&gt;

&lt;p&gt;在 Kubernetes 中, 可以采用 &lt;strong&gt;&lt;em&gt;YAML&lt;/em&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;em&gt;JSON&lt;/em&gt;&lt;/strong&gt; 格式声明一个 Kubernetes 资源对象&lt;/p&gt;

&lt;h3 id=&#34;master&#34;&gt;Master&lt;/h3&gt;

&lt;p&gt;Master 是集群中的控制节点, 每个 Kubernetes 集群中都需要一个 Master 来负责.&lt;/p&gt;

&lt;p&gt;在 Master 上, 运行着一下几个关键进程:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes API Server&lt;/strong&gt; :提供HTTP Rest 接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Controller Manager&lt;/strong&gt;: 所有对象的管理者&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Scheduler&lt;/strong&gt;: 负责资源调度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通常来说, Master 上还需要部署 &lt;strong&gt;&lt;em&gt;etcd&lt;/em&gt;&lt;/strong&gt; 服务, 用于保存所有资源对象的数据. (etcd 也可不部署在 Master 节点上)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 安装</title>
      <link>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Install/</link>
      <pubDate>Wed, 01 May 2019 15:05:33 +0800</pubDate>
      
      <guid>http://blog.k-8s.com/posts/Kubernetes-Note/Kubernetes-Install/</guid>
      <description>&lt;p&gt;本文教大家如何部署一个单 Master 两个 Node 节点的 Kubernetes 集群&lt;/p&gt;

&lt;p&gt;示例采用的系统环境如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu Server 16.04&lt;/li&gt;
&lt;li&gt;Docker -CE 18.06.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先关镜像版本如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;k8s.gcr.io/kube-proxy&lt;/strong&gt;: v1.14.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k8s.gcr.io/kube-apiserver&lt;/strong&gt;: v1.14.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k8s.gcr.io/kube-scheduler&lt;/strong&gt;: v1.14.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k8s.gcr.io/kube-controller-manager&lt;/strong&gt;: v1.14.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quay.io/coreos/flannel&lt;/strong&gt;: v0.11.0-amd64&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k8s.gcr.io/coredns&lt;/strong&gt;: 1.3.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k8s.gcr.io/kubernetes-dashboard-amd64&lt;/strong&gt;: v1.10.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k8s.gcr.io/etcd&lt;/strong&gt;: 3.3.10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k8s.gcr.io/pause&lt;/strong&gt;: 3.1&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>